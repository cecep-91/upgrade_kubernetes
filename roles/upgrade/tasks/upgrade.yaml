# ----- UPGRADE KUBERNETES ON FIRST MASTER
- name: Kubernetes kubeadm upgrade (first master)
  when: "('first_master' in group_names)"
  block:
    - name: Kubernetes kubeadm upgrade plan
      shell: kubeadm upgrade plan
      register: upgrade_plan
      retries: 3
      delay: 3
      until: upgrade_plan.rc == 0

    - name: Debug upgrade plan output
      debug:
        var: upgrade_plan.stdout_lines

    - name: Get kubeadm patch version number
      shell: dpkg -l | grep kubeadm | cut -d'.' -f3 | cut -d'-' -f1
      register: patch_version

    - name: Kubernetes kubeadm upgrade apply
      shell: echo y | kubeadm upgrade apply v1.{{ current_target_version }}.{{ patch_version.stdout_lines.0 }}
      register: upgrade_apply
      retries: 3
      delay: 3
      until: upgrade_apply.rc == 0

    - name: Debug upgrade apply output
      debug:
        var: upgrade_apply.stdout_lines

# ----- UPGRADE KUBERNETES ON OTHER MASTER AND WORKER NODE
- name: Kubernetes kubeadm upgrade (other master and worker node)
  when: "('worker' in group_names) or ('other_master' in group_names)"
  block:
    - name: Execute kubeadm upgrade node command
      shell: kubeadm upgrade node
      register: upgrade_node
      retries: 3
      delay: 3
      until: upgrade_node.rc == 0

    - name: Debug upgrade node output
      debug:
        var: upgrade_node.stdout_lines

# ----- UPGRADE KUBELET AND KUBECTL
- name: Upgrade kubelet and kubectl
  block:
    - name: Upgrade kubelet and kubectl versions
      apt:
        name: "{{ item }}"
        state: present
        allow_downgrade: true
      loop:
        - "kubelet=1.{{ current_target_version }}*"
        - "kubectl=1.{{ current_target_version }}*"

    - name: Manage kubelet configuration and CRI switch
      when: current_target_version | int == 24
      block:
        - name: Update kubelet config
          ansible.builtin.copy:
            src: kubeadm-flags.env
            dest: /var/lib/kubelet/kubeadm-flags.env

        - name: Switch to cri-dockerd
          shell: >
            KUBECONFIG={{ kubeconfig }} kubectl annotate node {{ k8s_node_name }}
              --overwrite kubeadm.alpha.kubernetes.io/cri-socket=unix:///var/run/cri-dockerd.sock
          delegate_to: "{{ groups['first_master'][0] }}"
          register: result
          retries: 3
          delay: 3
          until: "result.rc == 0"

# ----- CORDON NODE
- name: Drain and cordon node
  shell: >
    KUBECONFIG={{ kubeconfig }} kubectl drain {{ k8s_node_name }}
    {% if 'first_master' in group_names or 'other_master' in group_names %}
    --ignore-daemonsets --delete-local-data
    {% else %}
    --ignore-daemonsets
    {% endif %}
  delegate_to: "{{ groups['first_master'][0] }}"
  register: result
  retries: 3
  delay: 3
  until: result.rc == 0

- name: Reload systemd daemon
  systemd:
    daemon_reload: yes

- name: Restart kubelet service
  ansible.builtin.service:
    name: kubelet
    state: restarted
    enabled: yes

# ----- UNCORDON NODE
- name: Uncordon node
  block:
    - name: Uncordon node
      shell: "KUBECONFIG={{ kubeconfig }} kubectl uncordon {{ k8s_node_name }}"
      delegate_to: "{{ groups['first_master'][0] }}"
      register: result
      retries: 3
      delay: 3
      until: "result.rc == 0"

    - name: Wait for 10 seconds
      ansible.builtin.wait_for:
        timeout: 10

    - name: Check node status
      shell: "KUBECONFIG={{ kubeconfig }} kubectl get node -o wide | grep {{ k8s_node_name }}"
      delegate_to: "{{ groups['first_master'][0] }}"
      register: node_status
      retries: 3
      delay: 3
      until: "node_status.rc == 0"

# ----- DEBUGGING UPGRADE STATUS
- name: Debugging upgrade status
  block:
    - name: Set node upgrade status fact
      ansible.builtin.set_fact:
        gather_done: 'done'
      when: current_target_version | int == target_minor_version | int

    - name: Debug node status after upgrade
      debug:
        var: node_status.stdout_lines.0

    - name: Debug upgrade success message
      debug:
        msg: "{{ k8s_node_name }} is successfully upgraded to Kubernetes 1.{{ current_target_version }}"
