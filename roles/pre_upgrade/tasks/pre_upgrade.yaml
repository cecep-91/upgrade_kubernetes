# ----- REMOVE KUBERNETES REPOSITORY
- name: Remove kubernetes repository
  block:
    - name: Get URL of kubeadm repository
      shell: apt-cache policy kubeadm | grep http | awk '{print $2}' | head -n1
      register: repo_url
      changed_when: false

    - name: Find kubeadm repository file
      shell: "grep -r --include '*.list' '^deb ' /etc/apt/sources.list.d/ | grep '{{ repo_url.stdout }}' | awk -F':' '{print $1}'"
      register: repo_file
      changed_when: false
      when: repo_url.stdout is defined

    - name: Delete kubernetes repository file
      file:
        path: "{{ repo_file.stdout }}"
        state: absent
      when: repo_file.stdout is defined

# ----- ADD KUBERNETES REPOSITORY
- name: Add Kubernetes repository version 1.{{ current_target_version }}
  block:
    - name: Import GPG key for Kubernetes repository
      shell: >
        {% if current_target_version | int < 24 %}
        curl -fsSL http://mirror.azure.cn/kubernetes/packages/apt/doc/apt-key.gpg | gpg --dearmor > /etc/apt/trusted.gpg.d/kubernetes.gpg
        {% else %}
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.{{ current_target_version }}/deb/Release.key | gpg --dearmor > /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        {% endif %}
      register: gpg_key_import
      changed_when: gpg_key_import.rc != 0

    - name: Add Kubernetes repository
      lineinfile:
        line: >
          {% if current_target_version | int < 24 %}
          deb http://mirror.azure.cn/kubernetes/packages/apt/ kubernetes-xenial main
          {% else %}
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.{{ current_target_version }}/deb/ /
          {% endif %}
        path: /etc/apt/sources.list.d/kubernetes.list
        state: present
        create: true

# ----- UPGRADE KUBEADM
- name: Update apt cache and upgrade kubeadm
  block:
    - name: Update apt cache
      apt:
        update_cache: true

    - name: Upgrade kubeadm
      apt: 
        name: "{{ item }}"
        state: present
        allow_downgrade: true
      loop:
        - "kubeadm=1.{{ current_target_version }}*"

# ----- MANAGE CRI FOR UPGRADING TO 1.24
- name: Manage cri-dockerd installation and docker upgrade
  when: current_target_version | int == 24
  block:
    - name: Upgrade docker
      apt:
        name: "{{ item }}"
        state: latest
      loop:
        - docker-ce
        - docker-ce-cli

    - name: Install cri-dockerd
      ansible.builtin.copy:
        src: cri-dockerd
        dest: /usr/local/bin/cri-dockerd
        mode: 755
        owner: root
        group: root

    - name: Install cri-docker.service and cri-docker.socket
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /etc/systemd/system
      loop:
        - cri-docker.service
        - cri-docker.socket

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Start cri-docker
      ansible.builtin.service:
        name: cri-docker
        state: restarted
        enabled: yes

    - name: Remove containerd config
      file:
        path: /etc/containerd/config.toml
        state: absent

    - name: Restart containerd
      ansible.builtin.service:
        name: containerd
        state: restarted

    - name: Switch CRI to containerd
      shell: >
        KUBECONFIG={{ kubeconfig }} kubectl annotate node {{ k8s_node_name }}
          --overwrite kubeadm.alpha.kubernetes.io/cri-socket=unix:///var/run/containerd/containerd.sock
      delegate_to: "{{ groups['first_master'][0] }}"
      register: result
      retries: 3
      delay: 3
      until: "result.rc == 0"

# ----- DOWNLOAD KUBERNETES IMAGES
- name: Downloading images for Kubernetes 1.{{ current_target_version }} upgrade
  shell: >
    {% if current_target_version | int < 24 %}
    kubeadm config images pull
    {% elif current_target_version | int == 24 %}
    kubeadm config images pull --cri-socket=unix:///var/run/containerd/containerd.sock
    {% else %}
    kubeadm config images pull --cri-socket=unix:///var/run/cri-dockerd.sock
    {% endif %}
  register: result
  retries: 3
  delay: 3
  until: result.rc == 0